/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import java.awt.datatransfer.StringSelection;
/**
 *
 * @author rudsr
 */
public class appointmentManager extends javax.swing.JFrame
{
    
    private dbConnection db;
    
    
    /**
     * Creates new form appointmentManager
     */
    public appointmentManager(dbConnection db) 
    {
        this.db = db;
        initComponents();
        loadAppointmentsIntoTable();
        setupTableCopy();
    }
  
    private void loadAppointmentsIntoTable() 
    {
        DefaultTableModel model = (DefaultTableModel) ApointmentMtable.getModel();
        model.setRowCount(0);

        Connection conn = db.getConnection();
        try (Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM Appointments")) {

            while (rs.next()) 
            {
                model.addRow(new Object[]{
                    rs.getInt("AppointmentID"),
                    rs.getString("StudentName"),
                    rs.getString("CounselorID"),
                    rs.getString("AppointmentDate"),
                    rs.getString("AppointmentTime"),
                    rs.getString("Status")
                });
            }
        } 
        catch (SQLException ex) 
        {
            JOptionPane.showMessageDialog(this, "Error loading appointments: " + ex.getMessage());
        }
    }
    private void clearFields() 
    {
        txtFieldAMStudentName.setText("");
        txtFieldAMCounselorID.setText("");
        txtFieldAMDate.setText("");
        txtFieldAMTime.setText("");
        txtFieldAMStatus.setText("");
    }
     
    private void setupTableCopy() {
        ApointmentMtable.setCellSelectionEnabled(true);
        ApointmentMtable.getInputMap().put(KeyStroke.getKeyStroke("ctrl C"), "copy");
        ApointmentMtable.getActionMap().put("copy", new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                StringSelection selection = new StringSelection(getSelectedTableCells());
                Toolkit.getDefaultToolkit().getSystemClipboard().setContents(selection, selection);
            }
        });
    }
    
    private String getSelectedTableCells() {
        int[] rows = ApointmentMtable.getSelectedRows();
        int[] cols = ApointmentMtable.getSelectedColumns();
        StringBuilder sb = new StringBuilder();

        for (int row : rows) {
            for (int i = 0; i < cols.length; i++) {
                Object value = ApointmentMtable.getValueAt(row, cols[i]);
                sb.append(value == null ? "" : value.toString());
                if (i < cols.length - 1) sb.append("\t");
            }
            sb.append("\n");
        }
        return sb.toString();
    }
    // Event handler for Exit button
    // Event handler for Main Menu button

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ApointmentMtable = new javax.swing.JTable();
        btnAMadd = new javax.swing.JButton();
        btnAMmainmenu = new javax.swing.JButton();
        btnAMexit = new javax.swing.JButton();
        lableStudentname = new javax.swing.JLabel();
        lableCounselorId = new javax.swing.JLabel();
        lableDate = new javax.swing.JLabel();
        lableTime = new javax.swing.JLabel();
        lableStatus = new javax.swing.JLabel();
        txtFieldAMStudentName = new javax.swing.JTextField();
        txtFieldAMCounselorID = new javax.swing.JTextField();
        txtFieldAMDate = new javax.swing.JTextField();
        txtFieldAMTime = new javax.swing.JTextField();
        txtFieldAMStatus = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1000, 800));
        setResizable(false);

        ApointmentMtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "AppointmentID", "StudentName", "CounselorID", "Date", "Time", "Status"
            }
        ));
        jScrollPane1.setViewportView(ApointmentMtable);
        if (ApointmentMtable.getColumnModel().getColumnCount() > 0) {
            ApointmentMtable.getColumnModel().getColumn(0).setResizable(false);
            ApointmentMtable.getColumnModel().getColumn(1).setResizable(false);
            ApointmentMtable.getColumnModel().getColumn(2).setResizable(false);
            ApointmentMtable.getColumnModel().getColumn(3).setResizable(false);
        }

        btnAMadd.setText("Add New");
        btnAMadd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAMaddActionPerformed(evt);
            }
        });

        btnAMmainmenu.setText("Main Menu");
        btnAMmainmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAMmainmenuActionPerformed(evt);
            }
        });

        btnAMexit.setText("Exit");
        btnAMexit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAMexitActionPerformed(evt);
            }
        });

        lableStudentname.setText("Student Name:");

        lableCounselorId.setText("Counselor ID:");

        lableDate.setText("Date:");

        lableTime.setText("Time:");

        lableStatus.setText("Status");

        txtFieldAMStudentName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFieldAMStudentNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 745, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnAMadd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lableStatus)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFieldAMStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnAMexit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAMmainmenu))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(lableStudentname)
                                .addGap(12, 12, 12))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lableCounselorId, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtFieldAMCounselorID, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                            .addComponent(txtFieldAMStudentName))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lableDate)
                            .addComponent(lableTime))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFieldAMTime, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(txtFieldAMDate, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(18, 18, 18))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lableStudentname)
                    .addComponent(lableDate)
                    .addComponent(lableStatus)
                    .addComponent(txtFieldAMStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFieldAMDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFieldAMStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lableCounselorId)
                    .addComponent(lableTime)
                    .addComponent(txtFieldAMCounselorID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFieldAMTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAMmainmenu)
                    .addComponent(btnAMexit)
                    .addComponent(btnAMadd))
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAMmainmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAMmainmenuActionPerformed
        this.dispose();
        new MainMenu().setVisible(true);
    }//GEN-LAST:event_btnAMmainmenuActionPerformed

    private void txtFieldAMStudentNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFieldAMStudentNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFieldAMStudentNameActionPerformed

    private void btnAMaddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAMaddActionPerformed
        String studentName = txtFieldAMStudentName.getText().trim();
        String counselorIdStr = txtFieldAMCounselorID.getText().trim();
        String dateStr = txtFieldAMDate.getText().trim();
        String timeStr = txtFieldAMTime.getText().trim();
        String status = txtFieldAMStatus.getText().trim();

        if (studentName.isEmpty() || counselorIdStr.isEmpty() || dateStr.isEmpty() || timeStr.isEmpty() || status.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill all fields.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int counselorId;
        try {
            counselorId = Integer.parseInt(counselorIdStr);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Counselor ID must be a number.", "Input Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        java.sql.Date sqlDate;
        try
        {
            sqlDate = java.sql.Date.valueOf(dateStr);
        }catch (IllegalArgumentException e)
        {
            JOptionPane.showMessageDialog(this, "Invalid Date");
        }
        java.sql.Time sqlTime;
        try
        {
            sqlTime = java.sql.Time.valueOf(timeStr);
        }catch (IllegalArgumentException e)
        {
            JOptionPane.showMessageDialog(this, "Invalid Time");
        }
        try {
            Connection conn = db.getConnection(); 
            try (PreparedStatement pstmt = conn.prepareStatement(
                "INSERT INTO Appointments (StudentName, CounselorID, AppointmentDate, AppointmentTime, Status) VALUES (?, ?, ?, ?, ?)")) {

                pstmt.setString(1, studentName);
                pstmt.setInt(2, counselorId);
                pstmt.setDate(3, java.sql.Date.valueOf(dateStr));
                pstmt.setTime(4, java.sql.Time.valueOf(timeStr));
                pstmt.setString(5, status);

                int rowsInserted = pstmt.executeUpdate();

                if (rowsInserted > 0) {
                    JOptionPane.showMessageDialog(this, "Appointment added successfully!");
                    loadAppointmentsIntoTable();
                    clearFields();
                } else 
                {
                    JOptionPane.showMessageDialog(this, "Failed to add appointment.", "Insert Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage(), "SQL Error", JOptionPane.ERROR_MESSAGE);
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this, "Invalid date/time format. Date must be YYYY-MM-DD and Time must be HH:MM:SS.", "Format Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAMaddActionPerformed

    private void btnAMexitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAMexitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnAMexitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    try {
        dbConnection db = new dbConnection();
        db.connect(); // ✅ Establish DB connection
        db.createTables(); // Optional: Create tables on startup
        
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {db.close();}));

        java.awt.EventQueue.invokeLater(() -> {
            new appointmentManager(db).setVisible(true);
        });
    } catch (ClassNotFoundException ex) {
        JOptionPane.showMessageDialog(null, "Database driver not found: " + ex.getMessage());
    }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ApointmentMtable;
    private javax.swing.JButton btnAMadd;
    private javax.swing.JButton btnAMexit;
    private javax.swing.JButton btnAMmainmenu;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lableCounselorId;
    private javax.swing.JLabel lableDate;
    private javax.swing.JLabel lableStatus;
    private javax.swing.JLabel lableStudentname;
    private javax.swing.JLabel lableTime;
    private javax.swing.JTextField txtFieldAMCounselorID;
    private javax.swing.JTextField txtFieldAMDate;
    private javax.swing.JTextField txtFieldAMStatus;
    private javax.swing.JTextField txtFieldAMStudentName;
    private javax.swing.JTextField txtFieldAMTime;
    // End of variables declaration//GEN-END:variables
}